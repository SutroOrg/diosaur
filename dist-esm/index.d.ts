import { IContainer } from "./Container";
import { Constructor, ServiceIdentifier } from "./Types";
import { Service, Inject, InjectAll, Factory, Parameter, ServiceConfig } from './Decorators';
export { Service, Inject, InjectAll, Factory, Parameter, IContainer, };
export declare const getContainer: () => Promise<IContainer>;
export declare const refreshContainer: () => Promise<IContainer>;
export declare const setParameter: (key: string | symbol | Constructor, value: any) => void;
declare type anonymousFactory = ((args: any[]) => Object) | Object;
declare type asyncAnonymousFactory = ((args: any[]) => Object | Promise<Object>) | Object | Promise<Object>;
export declare const register: (identifier: ServiceIdentifier, factory: anonymousFactory, config?: Partial<ServiceConfig>) => void;
export declare const registerAsync: (identifier: ServiceIdentifier, factory: asyncAnonymousFactory, config?: Partial<ServiceConfig>) => void;
